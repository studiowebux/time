# Studio Webux S.E.N.C @ 2021

AWSTemplateFormatVersion: 2010-09-09
Description: Webux Lab - Frontend

Parameters:
  Tenant:
    Type: String
  HostedZoneId:
    Type: String
    Description: Route53 Hosted zone
    Default: 'Z259V6F2G1HA2O'
  DomainName:
    Type: String
    Description: Frontend Domain Name

  Stage:
    Type: String
    Description: Stage name
    AllowedValues:
      - 'dev'
      - 'prod'
      - 'test'

  FrontendCertificate:
    Type: String
    Description: ACM public certificate arn, must be in us-east-1

Resources:
  PublicS3Bucket:
    Type: 'AWS::S3::Bucket'
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      BucketName: !Sub 'www.${DomainName}'

  PublicS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref PublicS3Bucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: 'Allow'
            Principal:
              AWS: !Sub 'arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${CloudFrontOAI}'
            Action: 's3:GetObject'
            Resource: !Sub 'arn:aws:s3:::www.${DomainName}/*'

  cloudfrontdistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        DefaultRootObject: 'index.html'
        Enabled: true
        HttpVersion: http1.1
        Aliases:
          - !Ref DomainName
          - !Sub 'www.${DomainName}'
        PriceClass: PriceClass_100
        ViewerCertificate:
          AcmCertificateArn: !Ref FrontendCertificate
          MinimumProtocolVersion: TLSv1.2_2019
          SslSupportMethod: sni-only
        CustomErrorResponses:
          - ErrorCachingMinTTL: 10
            ErrorCode: 404
            ResponseCode: 404
            ResponsePagePath: /404.html
          - ErrorCachingMinTTL: 10
            ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /index.html
        Origins:
          - DomainName: !GetAtt
              - PublicS3Bucket
              - RegionalDomainName
            Id: !Sub '${Tenant}_${Stage}_id'
            S3OriginConfig:
              OriginAccessIdentity: !Sub 'origin-access-identity/cloudfront/${CloudFrontOAI}'
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          CachedMethods:
            - GET
            - HEAD
            - OPTIONS
          CachePolicyId: '658327ea-f89d-4fab-a63d-7e88639e58f6'
          Compress: true
          ForwardedValues:
            QueryString: false
          ViewerProtocolPolicy: redirect-to-https
          TargetOriginId: !Sub '${Tenant}_${Stage}_id'

  CloudFrontOAI:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub 'OAI For ${Tenant} (${Stage})'

  # The Hosted Zone Id is hardcoded to work with CloudFront
  Route53Frontend:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !Ref DomainName
      Type: A
      AliasTarget:
        DNSName: !GetAtt cloudfrontdistribution.DomainName
        HostedZoneId: Z2FDTNDATAQYW2

  Route53WWWFrontend:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !Sub 'www.${DomainName}'
      Type: A
      AliasTarget:
        DNSName: !GetAtt cloudfrontdistribution.DomainName
        HostedZoneId: Z2FDTNDATAQYW2

Outputs:
  CloudFrontDistributionId:
    Value: !Ref cloudfrontdistribution
    Description: Cloudfront Distribution Id
    Export:
      Name: !Sub '${AWS::StackName}:CloudFrontDistributionId'
  CloudfrontDomainName:
    Value: !GetAtt cloudfrontdistribution.DomainName
    Description: Cloudfront Distribution Domain Name
    Export:
      Name: !Sub '${AWS::StackName}:CloudfrontDomainName'

  FrontendCertificateArn:
    Value: !Ref FrontendCertificate
    Description: Frontend Certificate Arn
    Export:
      Name: !Sub '${AWS::StackName}:FrontendCertificateArn'

  PublicS3BucketName:
    Value: !Ref PublicS3Bucket
    Export:
      Name: !Sub '${AWS::StackName}:PublicS3BucketName'
  WebsiteURL:
    Value: !GetAtt
      - PublicS3Bucket
      - WebsiteURL
    Description: URL for website hosted on S3
    Export:
      Name: !Sub '${AWS::StackName}:WebsiteURL'
  PublicS3BucketSecureURL:
    Value: !Join
      - ''
      - - 'https://'
        - !GetAtt
          - PublicS3Bucket
          - DomainName
    Description: Name of S3 bucket to hold website content
    Export:
      Name: !Sub '${AWS::StackName}:PublicS3BucketSecureURL'
